// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub type TransformHtmlConfig = root::component::types::TransformHtmlConfig;
pub type BlocksAndImages = root::component::types::BlocksAndImages;
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "transform-html"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_transform_html(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: i32,arg10: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let len1 = arg3 as usize;
    let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
    let len2 = arg5 as usize;
    let bytes2 = Vec::from_raw_parts(arg4 as *mut _, len2, len2);
    let len3 = arg7 as usize;
    let bytes3 = Vec::from_raw_parts(arg6 as *mut _, len3, len3);
    let result4 = <_GuestImpl as Guest>::transform_html(wit_bindgen::rt::string_lift(bytes0), root::component::types::TransformHtmlConfig{
      placeholder_class: wit_bindgen::rt::string_lift(bytes1),
      base_path_for_relative_images: wit_bindgen::rt::string_lift(bytes2),
      post_id: wit_bindgen::rt::string_lift(bytes3),
      text_splitter_config: match arg8 {
        0 => None,
        1 => {
          let e = root::component::types::TextSplitterConfig{
            max_length: arg9,
            min_length: arg10,
          };
          Some(e)
        }
        _ => wit_bindgen::rt::invalid_enum_discriminant(),
      },
    });
    let ptr5 = _RET_AREA.0.as_mut_ptr() as i32;
    let root::component::types::BlocksAndImages{ blocks:blocks6, images:images6, } = result4;
    let vec12 = blocks6;
    let len12 = vec12.len() as i32;
    let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 16, 4);
    let result12 = if layout12.size() != 0
    {
      let ptr = alloc::alloc(layout12);
      if ptr.is_null()
      {
        alloc::handle_alloc_error(layout12);
      }
      ptr
    }else {{
      ::core::ptr::null_mut()
    }};
    for (i, e) in vec12.into_iter().enumerate() {
      let base = result12 as i32 + (i as i32) * 16;
      {
        use root::component::types::ContentBlock as V11;
        match e {
          V11::Intro(e) => {
            *((base + 0) as *mut u8) = (0i32) as u8;
            let root::component::types::HtmlData{ html:html7, section:section7, } = e;
            let vec8 = (html7.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr() as i32;
            let len8 = vec8.len() as i32;
            ::core::mem::forget(vec8);
            *((base + 8) as *mut i32) = len8;
            *((base + 4) as *mut i32) = ptr8;
            *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(section7);
          },
          V11::H2(e) => {
            *((base + 0) as *mut u8) = (1i32) as u8;
            let root::component::types::HtmlData{ html:html9, section:section9, } = e;
            let vec10 = (html9.into_bytes()).into_boxed_slice();
            let ptr10 = vec10.as_ptr() as i32;
            let len10 = vec10.len() as i32;
            ::core::mem::forget(vec10);
            *((base + 8) as *mut i32) = len10;
            *((base + 4) as *mut i32) = ptr10;
            *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(section9);
          },
        }
      }
    }
    *((ptr5 + 4) as *mut i32) = len12;
    *((ptr5 + 0) as *mut i32) = result12 as i32;
    let vec15 = images6;
    let len15 = vec15.len() as i32;
    let layout15 = alloc::Layout::from_size_align_unchecked(vec15.len() * 24, 4);
    let result15 = if layout15.size() != 0
    {
      let ptr = alloc::alloc(layout15);
      if ptr.is_null()
      {
        alloc::handle_alloc_error(layout15);
      }
      ptr
    }else {{
      ::core::ptr::null_mut()
    }};
    for (i, e) in vec15.into_iter().enumerate() {
      let base = result15 as i32 + (i as i32) * 24;
      {
        let root::component::types::ImageData{ src:src13, width:width13, height:height13, } = e;
        let vec14 = (src13.into_bytes()).into_boxed_slice();
        let ptr14 = vec14.as_ptr() as i32;
        let len14 = vec14.len() as i32;
        ::core::mem::forget(vec14);
        *((base + 4) as *mut i32) = len14;
        *((base + 0) as *mut i32) = ptr14;
        match width13 {
          Some(e) => {
            *((base + 8) as *mut u8) = (1i32) as u8;
            *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
          },
          None => {
            {
              *((base + 8) as *mut u8) = (0i32) as u8;
            }
          },
        };match height13 {
          Some(e) => {
            *((base + 16) as *mut u8) = (1i32) as u8;
            *((base + 20) as *mut i32) = wit_bindgen::rt::as_i32(e);
          },
          None => {
            {
              *((base + 16) as *mut u8) = (0i32) as u8;
            }
          },
        };}
      }
      *((ptr5 + 12) as *mut i32) = len15;
      *((ptr5 + 8) as *mut i32) = result15 as i32;
      ptr5
    }
    
    const _: () = {
      #[doc(hidden)]
      #[export_name = "cabi_post_transform-html"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn __post_return_transform_html(arg0: i32,) {
        let l5 = *((arg0 + 0) as *const i32);
        let l6 = *((arg0 + 4) as *const i32);
        let base7 = l5;
        let len7 = l6;
        for i in 0..len7 {
          let base = base7 + i *16;
          {
            let l0 = i32::from(*((base + 0) as *const u8));
            match l0 {
              0 => {
                let l1 = *((base + 4) as *const i32);
                let l2 = *((base + 8) as *const i32);
                wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
              },
              _ => {
                let l3 = *((base + 4) as *const i32);
                let l4 = *((base + 8) as *const i32);
                wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
              },
            }
          }
        }
        wit_bindgen::rt::dealloc(base7, (len7 as usize) * 16, 4);
        let l10 = *((arg0 + 8) as *const i32);
        let l11 = *((arg0 + 12) as *const i32);
        let base12 = l10;
        let len12 = l11;
        for i in 0..len12 {
          let base = base12 + i *24;
          {
            let l8 = *((base + 0) as *const i32);
            let l9 = *((base + 4) as *const i32);
            wit_bindgen::rt::dealloc(l8, (l9) as usize, 1);
          }
        }
        wit_bindgen::rt::dealloc(base12, (len12 as usize) * 24, 4);
      }
    };
  };
  use super::Component as _GuestImpl;
  pub trait Guest {
    fn transform_html(input: wit_bindgen::rt::string::String,config: TransformHtmlConfig,) -> BlocksAndImages;
  }
  
  #[allow(unused_imports)]
  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
  
  #[repr(align(4))]
  struct _RetArea([u8; 16]);
  static mut _RET_AREA: _RetArea = _RetArea([0; 16]);
  pub mod root {
    pub mod component {
      
      #[allow(clippy::all)]
      pub mod types {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
        #[repr(C)]
        #[derive(Clone, Copy)]
        pub struct TextSplitterConfig {
          pub max_length: i32,
          pub min_length: i32,
        }
        impl ::core::fmt::Debug for TextSplitterConfig {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TextSplitterConfig").field("max-length", &self.max_length).field("min-length", &self.min_length).finish()
          }
        }
        #[derive(Clone)]
        pub struct TransformHtmlConfig {
          pub placeholder_class: wit_bindgen::rt::string::String,
          pub base_path_for_relative_images: wit_bindgen::rt::string::String,
          pub post_id: wit_bindgen::rt::string::String,
          pub text_splitter_config: Option<TextSplitterConfig>,
        }
        impl ::core::fmt::Debug for TransformHtmlConfig {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TransformHtmlConfig").field("placeholder-class", &self.placeholder_class).field("base-path-for-relative-images", &self.base_path_for_relative_images).field("post-id", &self.post_id).field("text-splitter-config", &self.text_splitter_config).finish()
          }
        }
        #[derive(Clone)]
        pub struct ImageData {
          pub src: wit_bindgen::rt::string::String,
          pub width: Option<i32>,
          pub height: Option<i32>,
        }
        impl ::core::fmt::Debug for ImageData {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("ImageData").field("src", &self.src).field("width", &self.width).field("height", &self.height).finish()
          }
        }
        #[derive(Clone)]
        pub struct HtmlData {
          pub html: wit_bindgen::rt::string::String,
          pub section: i32,
        }
        impl ::core::fmt::Debug for HtmlData {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("HtmlData").field("html", &self.html).field("section", &self.section).finish()
          }
        }
        #[derive(Clone)]
        pub enum ContentBlock{
          Intro(HtmlData),
          H2(HtmlData),
        }
        impl ::core::fmt::Debug for ContentBlock {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              ContentBlock::Intro(e) => {
                f.debug_tuple("ContentBlock::Intro").field(e).finish()
              }
              ContentBlock::H2(e) => {
                f.debug_tuple("ContentBlock::H2").field(e).finish()
              }
            }
          }
        }
        #[derive(Clone)]
        pub struct BlocksAndImages {
          pub blocks: wit_bindgen::rt::vec::Vec::<ContentBlock>,
          pub images: wit_bindgen::rt::vec::Vec::<ImageData>,
        }
        impl ::core::fmt::Debug for BlocksAndImages {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("BlocksAndImages").field("blocks", &self.blocks).field("images", &self.images).finish()
          }
        }
        
      }
      
    }
  }
  
  #[cfg(target_arch = "wasm32")]
  #[link_section = "component-type:root"]
  #[doc(hidden)]
  pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1016] = [3, 0, 4, 114, 111, 111, 116, 0, 97, 115, 109, 13, 0, 1, 0, 7, 230, 2, 1, 65, 2, 1, 66, 16, 1, 114, 2, 10, 109, 97, 120, 45, 108, 101, 110, 103, 116, 104, 122, 10, 109, 105, 110, 45, 108, 101, 110, 103, 116, 104, 122, 4, 0, 20, 116, 101, 120, 116, 45, 115, 112, 108, 105, 116, 116, 101, 114, 45, 99, 111, 110, 102, 105, 103, 3, 0, 0, 1, 107, 1, 1, 114, 4, 17, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 45, 99, 108, 97, 115, 115, 115, 29, 98, 97, 115, 101, 45, 112, 97, 116, 104, 45, 102, 111, 114, 45, 114, 101, 108, 97, 116, 105, 118, 101, 45, 105, 109, 97, 103, 101, 115, 115, 7, 112, 111, 115, 116, 45, 105, 100, 115, 20, 116, 101, 120, 116, 45, 115, 112, 108, 105, 116, 116, 101, 114, 45, 99, 111, 110, 102, 105, 103, 2, 4, 0, 21, 116, 114, 97, 110, 115, 102, 111, 114, 109, 45, 104, 116, 109, 108, 45, 99, 111, 110, 102, 105, 103, 3, 0, 3, 1, 107, 122, 1, 114, 3, 3, 115, 114, 99, 115, 5, 119, 105, 100, 116, 104, 5, 6, 104, 101, 105, 103, 104, 116, 5, 4, 0, 10, 105, 109, 97, 103, 101, 45, 100, 97, 116, 97, 3, 0, 6, 1, 114, 2, 4, 104, 116, 109, 108, 115, 7, 115, 101, 99, 116, 105, 111, 110, 122, 4, 0, 9, 104, 116, 109, 108, 45, 100, 97, 116, 97, 3, 0, 8, 1, 113, 2, 5, 105, 110, 116, 114, 111, 1, 9, 0, 2, 104, 50, 1, 9, 0, 4, 0, 13, 99, 111, 110, 116, 101, 110, 116, 45, 98, 108, 111, 99, 107, 3, 0, 10, 1, 112, 11, 1, 112, 7, 1, 114, 2, 6, 98, 108, 111, 99, 107, 115, 12, 6, 105, 109, 97, 103, 101, 115, 13, 4, 0, 17, 98, 108, 111, 99, 107, 115, 45, 97, 110, 100, 45, 105, 109, 97, 103, 101, 115, 3, 0, 14, 4, 1, 20, 114, 111, 111, 116, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 47, 116, 121, 112, 101, 115, 5, 0, 11, 11, 1, 0, 5, 116, 121, 112, 101, 115, 3, 0, 0, 7, 138, 4, 1, 65, 2, 1, 65, 8, 1, 66, 16, 1, 114, 2, 10, 109, 97, 120, 45, 108, 101, 110, 103, 116, 104, 122, 10, 109, 105, 110, 45, 108, 101, 110, 103, 116, 104, 122, 4, 0, 20, 116, 101, 120, 116, 45, 115, 112, 108, 105, 116, 116, 101, 114, 45, 99, 111, 110, 102, 105, 103, 3, 0, 0, 1, 107, 1, 1, 114, 4, 17, 112, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 45, 99, 108, 97, 115, 115, 115, 29, 98, 97, 115, 101, 45, 112, 97, 116, 104, 45, 102, 111, 114, 45, 114, 101, 108, 97, 116, 105, 118, 101, 45, 105, 109, 97, 103, 101, 115, 115, 7, 112, 111, 115, 116, 45, 105, 100, 115, 20, 116, 101, 120, 116, 45, 115, 112, 108, 105, 116, 116, 101, 114, 45, 99, 111, 110, 102, 105, 103, 2, 4, 0, 21, 116, 114, 97, 110, 115, 102, 111, 114, 109, 45, 104, 116, 109, 108, 45, 99, 111, 110, 102, 105, 103, 3, 0, 3, 1, 107, 122, 1, 114, 3, 3, 115, 114, 99, 115, 5, 119, 105, 100, 116, 104, 5, 6, 104, 101, 105, 103, 104, 116, 5, 4, 0, 10, 105, 109, 97, 103, 101, 45, 100, 97, 116, 97, 3, 0, 6, 1, 114, 2, 4, 104, 116, 109, 108, 115, 7, 115, 101, 99, 116, 105, 111, 110, 122, 4, 0, 9, 104, 116, 109, 108, 45, 100, 97, 116, 97, 3, 0, 8, 1, 113, 2, 5, 105, 110, 116, 114, 111, 1, 9, 0, 2, 104, 50, 1, 9, 0, 4, 0, 13, 99, 111, 110, 116, 101, 110, 116, 45, 98, 108, 111, 99, 107, 3, 0, 10, 1, 112, 11, 1, 112, 7, 1, 114, 2, 6, 98, 108, 111, 99, 107, 115, 12, 6, 105, 109, 97, 103, 101, 115, 13, 4, 0, 17, 98, 108, 111, 99, 107, 115, 45, 97, 110, 100, 45, 105, 109, 97, 103, 101, 115, 3, 0, 14, 3, 1, 20, 114, 111, 111, 116, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 47, 116, 121, 112, 101, 115, 5, 0, 2, 3, 0, 0, 21, 116, 114, 97, 110, 115, 102, 111, 114, 109, 45, 104, 116, 109, 108, 45, 99, 111, 110, 102, 105, 103, 3, 0, 21, 116, 114, 97, 110, 115, 102, 111, 114, 109, 45, 104, 116, 109, 108, 45, 99, 111, 110, 102, 105, 103, 3, 0, 1, 2, 3, 0, 0, 17, 98, 108, 111, 99, 107, 115, 45, 97, 110, 100, 45, 105, 109, 97, 103, 101, 115, 3, 0, 17, 98, 108, 111, 99, 107, 115, 45, 97, 110, 100, 45, 105, 109, 97, 103, 101, 115, 3, 0, 3, 1, 64, 2, 5, 105, 110, 112, 117, 116, 115, 6, 99, 111, 110, 102, 105, 103, 2, 0, 4, 4, 0, 14, 116, 114, 97, 110, 115, 102, 111, 114, 109, 45, 104, 116, 109, 108, 1, 5, 4, 1, 19, 114, 111, 111, 116, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 47, 114, 111, 111, 116, 4, 0, 11, 10, 1, 0, 4, 114, 111, 111, 116, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
  
  #[inline(never)]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  pub fn __link_section() {}
  